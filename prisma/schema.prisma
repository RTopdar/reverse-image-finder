// MongoDB Datasource Configuration
datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

generator client {
  provider = "prisma-client-js"
}

// User model for storing user information
model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectID mapped to _id
  name        String?
  image       String?
  email       String    @unique
  provider    String?
  emailVerified DateTime?
  password    String?
  fromGoogle  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Existing relations
  pictures    Picture[] 
  accounts    Account[] 
  history     DateTime[]

  // New back-relations for Account, Comment, and Reply models
  comments    Comment[]  // One-to-many relation with Comment model
  replies     Reply[]    // One-to-many relation with Reply model
}
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}


model Picture {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectID mapped to _id
  url        String    // URL of the image
  uploaderId String    // Foreign key reference to User
  uploadedAt DateTime  @default(now()) // Automatic timestamp for when the image was uploaded
  uploader   User      @relation(fields: [uploaderId], references: [id]) // Relating back to the User model
  board      String?   // Board name for categorizing images
  comments   Comment[] // One-to-many relation with Comment
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectID mapped to _id
  imageId   String   @db.ObjectId // Foreign key reference to Picture model
  userId    String   @db.ObjectId // Foreign key reference to User model
  text      String   // The comment content
  replies   Reply[]  // One-to-many relation with Reply model

  picture   Picture  @relation(fields: [imageId], references: [id]) // Relation to Picture model
  user      User     @relation(fields: [userId], references: [id])  // Relation to User model
}

model Reply {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectID mapped to _id
  commentId  String   @db.ObjectId // Foreign key reference to Comment model
  userId     String   @db.ObjectId // Foreign key reference to User model
  reply      String   // The reply content

  comment    Comment  @relation(fields: [commentId], references: [id]) // Relation to Comment model
  user       User     @relation(fields: [userId], references: [id])    // Relation to User model
}
